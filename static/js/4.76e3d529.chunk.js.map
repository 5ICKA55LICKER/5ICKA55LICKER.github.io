{"version":3,"sources":["../../../src/parseAssetId.ts","../../../src/parseSource.ts","../../../src/urlForImage.ts","../../../src/builder.ts","components/logo/logo.component.jsx","store/WorksContext.jsx","components/work-item/work-item.component.jsx","pages/works.component.jsx","pages/home.component.jsx"],"names":["example","parseSource","source","src","test","image","asset","_ref","urlToId","isAsset","isAssetStub","img","result","left","top","bottom","right","x","y","height","width","applyDefaults","url","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","ref","id","dimensionString","format","Error","imgWidthStr","imgHeightStr","isFinite","parseAssetId","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","imgWidth","imgHeight","rect","desiredAspectRatio","cropRect","fit","cdnUrl","filename","baseUrl","params","flip","specName","mapping","param","encodeURIComponent","specToImageUrl","validFits","validCrops","validAutoModes","entry","key","ImageUrlBuilder","this","parent","withOptions","newOptions","rewriteSpecName","dataset","projectId","bg","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","toString","client","isSanityClient","apiUrl","apiHost","builder","imageUrlBuilder","sanityClient","LogoImg","styled","Logo","header","useContext","HomeContext","logo","alt","WorksContext","createContext","WorksContextProvider","props","useState","works","setWorks","useEffect","worksArray","fetch","then","forEach","work","push","Provider","children","Image","WorkItem","WorkContainer","div","Works","map","item","Container","HomeSection","Home"],"mappings":"ikCAAA,IAAMA,EAAN,+CCyBA,SAAwBC,EAAYC,GAClC,MACE,YAGF,MAtBaC,EAwBb,GAAsB,kBAAXD,GAmDJ,eAAeE,KAAK,GAnD3B,GAEEC,EAAQ,CACNC,MAAO,CAACC,KAAMC,EAAQN,UAEnB,qBAAWA,EAEhBG,EAAQ,CACNC,MAAO,CAACC,KAAML,SAEX,IAlCMC,EAkCN,IAhCM,kBADb,EACgB,KAkCdE,EAAQ,CACNC,MAAOJ,QAEJ,GAlCO,SAACC,GAEf,QADA,GACa,kBADb,EACgB,IAgCLM,CAAJ,GAELJ,EAAQ,CACNC,MAAO,CACLC,KAAML,OAAc,UAGnB,GApCW,SAACC,GACnB,IAAMD,EAAN,EACA,SAAOA,IAAUA,EAAVA,0BAAgCA,QAAP,IAkCrBQ,CAAJ,GAELL,EAAQ,CACNC,MAAO,CACLC,KAAMC,EAAQN,QAAD,WAGZ,sBAAWA,EAAP,MAMT,YAJAG,IAOF,IAAMM,EAAN,EASA,OARIA,EAAJ,OACEN,OAAaM,EAAbN,MAGEM,EAAJ,UACEN,UAAgBM,EAAhBN,SAgBJ,YACE,GAAIA,QAAcA,EAAlB,QACE,SAIF,IAAMO,EAAS,EAAH,GAAZ,GAoBA,OAlBKA,EAAL,OACEA,OAAc,CACZC,KADY,EAEZC,IAFY,EAGZC,OAHY,EAIZC,MAAO,IAINJ,EAAL,UACEA,UAAiB,CACfK,EADe,GAEfC,EAFe,GAGfC,OAHe,EAIfC,MAAO,IAIX,EAvCOC,CAAP,GAOF,cAEE,OAAO,SADOC,oBAAd,GACO,0BAAP,OC3EK,IAAMC,EAAiC,CAC5C,CAAC,QAD2C,KAE5C,CAAC,SAF2C,KAG5C,CAAC,SAH2C,MAI5C,CAAC,WAJ2C,MAK5C,CAAC,OAL2C,QAM5C,CAAC,UAN2C,SAO5C,CAAC,SAP2C,UAQ5C,CAAC,cAR2C,MAS5C,CAAC,YAT2C,SAU5C,CAAC,YAV2C,SAW5C,CAAC,WAX2C,SAY5C,CAAC,WAZ2C,SAa5C,CAAC,UAb2C,KAc5C,CAAC,MAd2C,OAe5C,CAAC,OAf2C,QAgB5C,CAAC,aAhB2C,OAiB5C,CAAC,OAjB2C,QAkB5C,CAAC,MAlBI,QAqBP,SAAwBC,EAAYC,GAClC,IAAIC,EAAO,EAAH,GAAQD,GAAhB,IACMvB,EAASwB,EAAf,cACOA,EAAP,OAEA,IAAMrB,EAAQJ,EAAd,GACA,MACE,YAGF,IACMK,E,SF3C6BqB,G,MACKA,aAA/BC,OAAIC,OAAiBC,OAE9B,IAAKF,IAAD,IAAJ,EACE,MAAM,IAAIG,MAAM,yBAAV,gCAAN,M,MAGkCF,aAE9BT,GAFCY,KAGDb,GAHcc,KAMpB,IADuBC,cAAmBA,SAA1C,GAEE,MAAM,IAAIH,MAAM,yBAAV,gCAAN,MAGF,MAAO,CAACH,GAAD,EAAKR,MAAL,EAAYD,OAAZ,EAAoBW,UE0BbK,CADF9B,cAAyCA,QAAzCA,KAAZ,IAIM+B,EAAWC,WAAWhC,YAAkBC,EAA9C,OACMgC,EAAUD,WAAWhC,WAAiBC,EAA5C,QACMiC,EAAO,CACX1B,KADW,EAEXC,IAFW,EAGXM,MAAOiB,WAAW/B,QAAcD,aAAmBC,EAAjCA,MAHP,GAIXa,OAAQkB,WAAW/B,SAAeD,cAAoBC,EAAnCA,OAAX+B,IAIJG,EAAyBnC,iBAAuBC,EAAxB,OAA9B,EACMmC,EAA2BpC,gBAAsBC,EAAvB,MAAhC,EACMoC,EAAiBrC,YAAkBC,EAAzC,MACMqC,EAAiBtC,YAAkBC,EAAzC,OACMsC,EAAU,CACd/B,KAAM6B,EADQ,EAEd5B,IAAK6B,EAFS,EAGd3B,MAAO0B,EAHO,EAId3B,OAAQ4B,EAAiBH,GAS3B,OAJMd,QAAaA,EAAbA,YAAgCA,EAAhCA,mBAA0DA,EAAhE,OACEA,EAAO,EAAH,QAwDR,cAIE,MAEMmB,EAAWnB,EAAjB,MACMoB,EAAYpB,EAAlB,OAGA,IAAMmB,IAAN,EACE,MAAO,CAACzB,MAAD,EAAkBD,OAAlB,EAAqC4B,KAAM7C,EAAOqC,MAG3D,IAAMA,EAAOrC,EAAb,KACM0C,EAAU1C,EAAhB,QAGM8C,EAAqBH,EAA3B,EAGA,GAFwBN,QAAaA,EAArC,OAEA,EAA0C,CAExC,IAAMpB,EAASoB,EAAf,OACMnB,EAAQD,EAAd,EACML,EAAMyB,EAAZ,IAII1B,GADoB+B,QAAgBA,EAAjB,QAAqCA,EAA5D,KAC4BxB,EAA5B,EAGIP,EAAO0B,EAAX,KACE1B,EAAO0B,EAAP1B,KACSA,IAAe0B,OAAYA,EAA/B,QACL1B,EAAO0B,OAAYA,EAAZA,MAAP1B,GAGFoC,EAAW,CACTpC,KAAMwB,WADG,GAETvB,IAAKuB,WAFI,GAGTjB,MAAOiB,WAHE,GAITlB,OAAQkB,mBAEL,CAEL,IAAMjB,EAAQmB,EAAd,MACMpB,EAASC,EAAf,EACMP,EAAO0B,EAAb,KAIIzB,GADoB8B,SAAiBA,EAAlB,OAAqCA,EAA5D,IAC2BzB,EAA3B,EAGIL,EAAMyB,EAAV,IACEzB,EAAMyB,EAANzB,IACSA,IAAeyB,MAAWA,EAA9B,SACLzB,EAAMyB,MAAWA,EAAXA,OAANzB,GAGFmC,EAAW,CACTpC,KAAMwB,WAAYA,WADT,IAETvB,IAAKuB,WAAYA,WAFR,IAGTjB,MAAOiB,WAHE,GAITlB,OAAQkB,eAIZ,MAAO,CACLjB,MADK,EAELD,OAFK,EAGL4B,KAAME,GAhIcC,CAAI,CAACX,KAAD,EAAOK,WAA/BlB,KAOJ,YACE,IAAMyB,EAASzB,WAAf,wBACM0B,EAAc1B,QAAN,OAAuBA,QAAvB,UAA2CA,QAA3C,WAAgEA,QAA9E,OACM2B,EAAaF,EAAN,WAAuBzB,EAAvB,cAAyCA,EAAzC,YAAb,EAEM4B,EAAN,GAEA,GAAI5B,EAAJ,KAAe,OAEsBA,EAFtB,KAENb,EAFM,OAEAC,EAFA,MAEKM,EAFL,QAEYD,EAFZ,UAIXN,WAAcC,GAAaK,IAAWO,QAAtCb,QAA2DO,IAAUM,QADvE,QAIE4B,oCAIA5B,EAAJ,IACE4B,aAAkB5B,EAAlB4B,IAGE5B,EAAJ,aACE4B,eAAoB5B,aAApB4B,GACAA,eAAoB5B,aAApB4B,IAGF,IAAMC,EAAO,CAAC7B,kBAAD,IAA6BA,gBAA7B,0BAAb,IAeA,OAdA,GACE4B,kBAIF/B,WAAuC,Y,IAC9BiC,EAAmBC,KAATC,EAASD,KAC1B,qBAAW/B,EAAP,GACF4B,OAAeI,EAAfJ,IAAwBK,mBAAmBjC,EAA3C4B,KACK,qBAAW5B,EAAP,IACT4B,OAAeI,EAAfJ,IAAwBK,mBAAmBjC,EAA3C4B,QAIJ,IAAIA,SACF,EAGQD,EAAV,IAAqBC,OAArB,KAlDOM,CAAe,EAAD,YAAWtD,WC7DlC,IAAMuD,EAAY,CAAC,OAAQ,OAAQ,OAAQ,UAAW,MAAO,QAA7D,OACMC,EAAa,CAAC,MAAO,SAAU,OAAQ,QAAS,SAAU,aAAhE,WACMC,EAAiB,CAAvB,UAMA,cAEE,IADA,IACA,MADA,KACA,aAA2B,KAAhBC,EAAgB,QAClBR,EAAmBQ,EADD,GACRN,EAASM,EADD,GAEzB,GAAIC,OAAoBA,IAAxB,EACE,SAIJ,SAqBF,IAAaC,EAAb,WAGE,gBACEC,KAAA,QAAqB,EAANC,EAAM,KACZA,WADY,OACe3C,GADf,IAJzB,uCASE4C,YACE,IAAMhB,EAAU5B,WAAmB0C,KAAK1C,QAAxC,QAEM6C,EAAmC,CAACjB,WAC1C,IAAK,IAAL,OACM5B,iBAAJ,KAEE6C,EADgBC,EAAhB,IACsB9C,EAAtB6C,IAIJ,OAAO,IAAIJ,EAAgBC,KAAM,EAA1B,CAA2Bd,WAAlC,KApBJ,QA0BEhD,YACE,OAAO8D,KAAKE,YAAY,CAACnE,YA3B7B,UA+BEsE,YACE,OAAOL,KAAKE,YAAY,CAACG,aAhC7B,YAoCEC,YACE,OAAON,KAAKE,YAAY,CAACI,eArC7B,KAyCEC,YACE,OAAOP,KAAKE,YAAY,CAACK,QA1C7B,MA8CEC,YACE,OAAOR,KAAKE,YAAY,CAACM,SA/C7B,QAmDEvD,YACE,OAAO+C,KAAKE,YAAY,CAACjD,WApD7B,SAwDED,YACE,OAAOgD,KAAKE,YAAY,CAAClD,YAzD7B,aA6DEyD,cACE,OAAOT,KAAKE,YAAY,CAACO,WAAY,CAAC3D,EAAD,EAAIC,QA9D7C,WAiEE2D,YACE,OAAOV,KAAKE,YAAY,CAACQ,cAlE7B,WAqEEC,YACE,OAAOX,KAAKE,YAAY,CAACS,cAtE7B,YAyEEC,YACE,OAAOZ,KAAKE,YAAY,CAACU,eA1E7B,YA6EEC,YACE,OAAOb,KAAKE,YAAY,CAACW,eA9E7B,OAkFEC,cACE,OAAOd,KAAKE,YAAY,CAACjD,MAAD,EAAQD,YAnFpC,OAuFE+D,YACE,OAAOf,KAAKE,YAAY,CAACa,UAxF7B,UA2FEC,YACE,OAAOhB,KAAKE,YAAY,CAACc,aA5F7B,OAgGEpC,kBACE,OAAOoB,KAAKE,YAAY,CAACtB,KAAM,CAAClC,KAAD,EAAOC,IAAP,EAAYM,MAAZ,EAAmBD,aAjGtD,SAqGEW,YACE,OAAOqC,KAAKE,YAAY,CAACvC,YAtG7B,SAyGEsD,YACE,OAAOjB,KAAKE,YAAY,CAACe,YA1G7B,cA8GEC,YACE,OAAOlB,KAAKE,YAAY,CAACgB,iBA/G7B,UAmHEC,YACE,OAAOnB,KAAKE,YAAY,CAACiB,aApH7B,gBAwHEC,YACE,OAAOpB,KAAKE,YAAY,CAACmB,cAzH7B,iBA6HEC,WACE,OAAOtB,KAAKE,YAAY,CAACoB,gBAAgB,KA9H7C,eAkIEC,WACE,OAAOvB,KAAKE,YAAY,CAACqB,cAAc,KAnI3C,oBAuIEC,WACE,OAAOxB,KAAKE,YAAY,CAACsB,mBAAmB,KAxIhD,MA2IEzC,YACE,QAAIW,aACF,MAAM,IAAI9B,MAAM,qBAAV,EAAN,KAGF,OAAOoC,KAAKE,YAAY,CAACnB,IAAK0C,KAhJlC,OAmJErD,YACE,QAAIuB,aACF,MAAM,IAAI/B,MAAM,sBAAV,EAAN,KAGF,OAAOoC,KAAKE,YAAY,CAAC9B,KAAMqD,KAxJnC,aA4JEC,YACE,OAAO1B,KAAKE,YAAY,CAACwB,gBA7J7B,OAgKEC,YACE,QAAI/B,aACF,MAAM,IAAIhC,MAAM,sBAAV,EAAN,KAGF,OAAOoC,KAAKE,YAAY,CAACyB,KAAMF,KArKnC,MAyKEtE,WACE,OAAOE,EAAY2C,KAAnB,UA1KJ,WA8KE4B,WACE,OAAO5B,KAAP,OA/KJ,K,OAlBA,SAAmC1C,GAEjC,IAAMuE,EAAN,EACA,GAnBF,YACE,QAAOA,GAAM,kBAAUA,EAAP,aAkBZC,CAAJ,GAA4B,OAEoBD,EAFpB,aAEVE,EAFU,UAEFzB,EAFE,YAESD,EAFT,UAI1B,OAAO,IAAIN,EAAgB,KAAM,CAC/Bb,SAFc6C,GAAhB,yBAEWC,2BADsB,gBAE/B1B,UAF+B,EAG/BD,YAKJ,OAAO,IAAIN,EAAgB,KAA3B,I,0NC1CF,IAAMkC,EAAUC,IAAgBC,KAIhC,IAAMC,EAAUC,IAAO7F,IAAV,KAWE8F,EAPF,WAAO,IAPJvG,EAQJwG,EAAWC,qBAAWC,KAAtBF,OACR,OACI,kBAACH,EAAD,CAASpG,KAVDD,EAUawG,EAAOG,KAT3BT,EAAQ/F,MAAMH,IASmBoB,MAAOwF,IAAI,kB,QChBxCC,EAAeC,0BAwBbC,EAtBc,SAACC,GAAW,IAAD,EACVC,mBAAS,IADC,mBAC7BC,EAD6B,KACtBC,EADsB,KAapC,OAXAC,qBAAU,WACN,IAAMC,EAAa,GAEnBjB,IAAakB,MADE,uBACeC,MAAK,SAAAL,GACjCA,EAAMM,SAAQ,SAAAC,GACZJ,EAAWK,KAAKD,MAElBN,EAASE,QAEZ,IAGC,kBAACR,EAAac,SAAd,CAAuBjC,MAAO,CAACwB,UAE1BF,EAAMY,W,iNCfnB,IAAM1B,EAAUC,IAAgBC,KAKhC,IAAMyB,EAAQvB,IAAO7F,IAAV,KAeIqH,EAPE,SAAC,GAAY,IAZd9H,EAYGyH,EAAU,EAAVA,KAEf,OACI,kBAACI,EAAD,CAAO5H,KAfCD,EAeWyH,EAAKtH,MAdvB+F,EAAQ/F,MAAMH,IAcgBoB,S,gNCfvC,IAAM2G,EAAgBzB,IAAO0B,IAAV,KAqBJC,EAZD,WAAO,IACTf,EAAUT,qBAAWI,GAArBK,MACR,OACI,kBAACa,EAAD,CAAerG,GAAG,SAEVwF,EAAQA,EAAMgB,KAAI,SAACC,EAAMzG,GAAP,OAClB,kBAAC,EAAD,CAAUqC,IAAKrC,EAAI+F,KAAMU,OAAY,O,+TCfrD,IAAMC,EAAY9B,IAAO0B,IAAV,KAOTK,EAAc/B,IAAO0B,IAAV,KAuBFM,UAfF,WACT,OACI,kBAACF,EAAD,KACI,kBAACC,EAAD,KACI,kBAAC,EAAD,OAEJ,kBAAC,EAAD,KACI,kBAAC,EAAD","file":"static/js/4.76e3d529.chunk.js","sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions) {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = width / desiredAspectRatio\n    const left = crop.left\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n    let top = hotspotYCenter - height / 2\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {\n      left: Math.max(0, Math.floor(left)),\n      top: Math.max(0, Math.floor(top)),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClient,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClient(client?: SanityClient): client is SanityClient {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClient | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClient\n  if (isSanityClient(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    return this.withOptions({dpr})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image verically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n","import React, {useContext} from 'react'\nimport sanityClient from \"../../client\"\nimport imageUrlBuilder from '@sanity/image-url'\nimport styled from 'styled-components'\nimport { HomeContext } from '../../store/HomeContext'\n\n\nconst builder = imageUrlBuilder(sanityClient)\nfunction urlFor(source) {\n  return builder.image(source)\n}\nconst LogoImg = styled.img`\n    width: 90%;\n    height: auto;\n`\nconst Logo = () => {\n    const { header } = useContext(HomeContext)\n    return (\n        <LogoImg src={urlFor(header.logo).url()} alt=\"kom tillbaka\"/>\n    )\n}\n\nexport default Logo\n\n","import React, { createContext, useState, useEffect} from 'react'\nimport sanityClient from '../client'\nexport const WorksContext = createContext()\n\nconst WorksContextProvider = (props) => {\n    const [works, setWorks] = useState([])\n    useEffect(() => {\n        const worksArray = []\n        const workQuery = `*[_type == \"works\"]`\n        sanityClient.fetch(workQuery).then(works => {\n          works.forEach(work => {\n            worksArray.push(work)\n          })\n          setWorks(worksArray)\n        })\n    }, [])\n   \n    return (\n        <WorksContext.Provider value={{works}}>\n            \n            {props.children}\n            \n        </WorksContext.Provider>\n    )\n}\n\nexport default WorksContextProvider\n","import React from 'react'\nimport styled from 'styled-components'\nimport sanityClient from \"../../client\"\nimport imageUrlBuilder from '@sanity/image-url'\n\nconst builder = imageUrlBuilder(sanityClient)\nfunction urlFor(source) {\n  return builder.image(source)\n}\n\nconst Image = styled.img`\n    width: 80%;\n    height: auto;\n    margin-top: 125px;\n    @media screen and (max-width: 600px) {\n        margin-top: 50px;\n    }\n`\nconst WorkItem = ({work}) => {\n\n    return (\n        <Image src={urlFor(work.image).url()} />\n    )\n}\n\nexport default WorkItem\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { WorksContext } from '../store/WorksContext'\nimport WorkItem from '../components/work-item/work-item.component'\n\n\nconst WorkContainer = styled.div`\n    width: 100%;\n    height: auto;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Works = () => {\n    const { works } = useContext(WorksContext)\n    return (\n        <WorkContainer id=\"works\">\n            {\n                works ? works.map((item, id) => \n                <WorkItem key={id} work={item} />) : null\n            }\n        </WorkContainer>\n    )\n}\n\nexport default Works\n","import React from 'react'\nimport Logo from '../components/logo/logo.component'\nimport styled from 'styled-components'\nimport Works from './works.component'\nimport WorksContextProvider from '../store/WorksContext'\n\nconst Container = styled.div`\n    height: auto;\n    min-height: 300vh;\n    width: 100%;\n\n`\n\nconst HomeSection = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Home = () => {\n    return (\n        <Container>\n            <HomeSection>\n                <Logo />\n            </HomeSection>\n            <WorksContextProvider>\n                <Works/>\n            </WorksContextProvider>\n        </Container>\n        \n        \n    )\n}\n\nexport default Home\n"],"sourceRoot":""}